@using System.Drawing
@using System.Text.RegularExpressions

@inherits InputBase<Color>

<input type="color" @attributes=AdditionalAttributes class=@CssClass @bind=CurrentValueAsString />

@code {

    [Parameter]
    public string ParsingErrorMessage { get; set; }

    protected override string FormatValueAsString(Color value)
      => ColourToString(value);

    byte HexStringToByte(string hex)
    {
        const string HexChars = "0123456789abcdef";

        hex = hex.ToLowerInvariant();
        int result = (HexChars.IndexOf(hex[0]) * 16) + HexChars.IndexOf(hex[1]);
        return (byte)result;
    }

    static Regex Regex = new Regex("^#([0-9a-f]{2}){3}$", RegexOptions.Compiled | RegexOptions.IgnoreCase);

    protected override bool TryParseValueFromString(string? value, out Color result, out string validationErrorMessage)
    {
        if (value is null)
        {
            validationErrorMessage = ParsingErrorMessage;
            result = Color.Red;
            return false;
        }

        Match match = Regex.Match(value);

        if (!match.Success)
        {
            validationErrorMessage = ParsingErrorMessage;
            result = Color.Red;
            return false;
        }

        byte r = HexStringToByte(match.Groups[1].Captures[0].Value);
        byte g = HexStringToByte(match.Groups[1].Captures[1].Value);
        byte b = HexStringToByte(match.Groups[1].Captures[2].Value);

        validationErrorMessage = null;
        result = Color.FromArgb(r, g, b);
        return true;
    }

    public static string ColourToString(Color value)
      => $"#{value.R:x2}{value.G:x2}{value.B:x2}";


}
